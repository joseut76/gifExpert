{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OAEI,sBAAMC,SAjBW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAK,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAYlB,SACI,uBACAO,KAAO,OACPC,MAAUT,EACVU,SA1BkB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEkCC,UAAUH,GAF5C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcXM,GAdW,4CAAH,sDCGPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,sBAAKc,UAAW,yCAAhB,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,4BAAKA,QCNJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAE1B,ECH4B,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAbAC,qBAAW,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GAEJH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAInB,CAAEpB,IAGEqB,EDpBuBK,CAAc1B,GAAlCa,EAAd,EAAON,KAAea,EAAtB,EAAsBA,QAElB,OACI,qCACI,qBAAIJ,UAAW,oCAAf,cAAsDhB,EAAtD,OAECoB,GAAW,mBAAGJ,UAAW,mCAAd,wBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAM,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEYlBgB,EAzBM,WAEjB,MAAoCzC,mBAAU,CAAC,WAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,cAAC,WAAD,UACI,gCACI,8CAGA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BACM2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEIA,SAAaA,GADLA,c,MCfpC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.9b405511.chunk.js","sourcesContent":["import { React, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n     \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories(categ =>[inputValue, ...categ ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    AddCategory.propTypes = { \r\n    \r\n        setCategories : PropTypes.func.isRequired \r\n    }\r\n    \r\n    return (\r\n      \r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n            type = \"text\"\r\n            value = { inputValue }\r\n            onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n  \r\n    )\r\n}\r\n","export const getGifs = async(category)=>{\r\n\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=ThpG2R23qt79nFYzjl70uKqfUlSfrEbp`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title:img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return  gifs;\r\n}","import React from 'react'\r\n\r\n// export const GifGridItem = ( props ) => {\r\nexport const GifGridItem = ( {title, url }) => {\r\n    \r\n    // console.log( {id, title, url});\r\n\r\n    return (\r\n        <div className =\"card animate__animated animate__bounce\">\r\n            <img src = { url } alt = { title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n// way to rename variables\r\nconst {data : images, loading}  = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className =\"animate__animated animate__fadeIn\"> { category } </h3>\r\n            {/* if condition is true then display <p> else do nothing */}\r\n            {loading && <p className =\"animate__animated animate__flash\">Loading...</p>}\r\n           <div className=\"card-grid\">\r\n               {\r\n                   images.map ( img => (\r\n                       <GifGridItem\r\n                       key={ img.id }\r\n                       { ...img }\r\n                       />\r\n                   ))\r\n               }\r\n           </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //  //useEffect takes a function and a list or array of dependencies.\r\n//  //if we pass an empty array only fires one time, else every time there is a change,\r\n//  // producing and infinite loop =tocomponentDidMount when working in React with classes\r\n    useEffect( () => {\r\n         getGifs( category )\r\n             .then( imgs => { \r\n\r\n                setState({\r\n                 data: imgs,\r\n                 loading: false\r\n                });                \r\n                // },3000)\r\n            })\r\n    }, [ category ])\r\n\r\n    \r\n    return state;\r\n}\r\n","import {React,  Fragment, useState}  from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState( ['batman']);\r\n      \r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <h2>GifExpertApp</h2>\r\n               \r\n                {/* insert a component to display */}\r\n                <AddCategory setCategories = { setCategories } />\r\n                <hr />\r\n\r\n                <ol>\r\n                    { categories.map( category => (\r\n                        <GifGrid \r\n                            key = { category } \r\n                            category = { category }\r\n                        />\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}